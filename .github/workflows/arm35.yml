# .github/workflows/arm35.yml
# =========================================================

name: "Gen 3"

on:
  workflow_dispatch:
    inputs:
      ffmpeg_options:
        description: 'JSON string of ffmpeg settings'
        required: true
      release_tag:
        description: 'The tag of the GitHub release holding the file (GitHub method).'
        required: false
      upload_url:
        description: 'The URL of the uploaded file (temp.sh method).'
        required: false
      output_filename_base:  # <-- ADD THIS BLOCK
        description: 'The unique base name for the output file, without extension.'
        required: true

jobs:
  compress-video:
    runs-on: ubuntu-24.04-arm

    env:
      # BEST PRACTICE: Use the auto-generated, short-lived token for 'gh' CLI commands.
      GITHUB_TOKEN: ${{ github.token }}
      # Standardized GPG User ID for encrypting the final result.
      USER_GPG_RECIPIENT_ID: ${{ secrets.USER_GPG_RECIPIENT_ID }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "1. Install Core Dependencies (jq)"
        run: |
          sudo apt-get update
          # We only install jq here now. FFmpeg is handled in the next step.
          sudo apt-get install -y jq

      - name: "2. Install Latest FFmpeg Static Build (from BtbN)"
        run: |
          echo "Runner architecture is: ${{ runner.arch }}"
          
          # Define the base URL and filenames
          BASE_URL="https://github.com/BtbN/FFmpeg-Builds/releases/download/latest"
          if [ "${{ runner.arch }}" == "X64" ]; then
            FFMPEG_FILENAME="ffmpeg-master-latest-linux64-gpl.tar.xz"
          elif [ "${{ runner.arch }}" == "ARM64" ]; then
            FFMPEG_FILENAME="ffmpeg-master-latest-linuxarm64-gpl.tar.xz"
          else
            echo "Error: Unsupported architecture: ${{ runner.arch }}"
            exit 1
          fi

          DOWNLOAD_URL="$BASE_URL/$FFMPEG_FILENAME"
          echo "Downloading FFmpeg from: $DOWNLOAD_URL"
          curl -sL "$DOWNLOAD_URL" -o ffmpeg.tar.xz

          echo "Extracting FFmpeg..."
          tar -xf ffmpeg.tar.xz --strip-components=1

          echo "Installing FFmpeg to /usr/local/bin/"
          sudo mv ./bin/ffmpeg ./bin/ffprobe /usr/local/bin/
          
          echo "Verifying FFmpeg installation..."
          ffmpeg -version

      - name: "3. Import GPG Keys"
        env:
          # Standardized secret names. Ensure these match your repo secrets.
          ACTION_GPG_PRIVATE_KEY: ${{ secrets.GPG_ACTION_PRIVATE_KEY }}
          USER_GPG_PUBLIC_KEY: ${{ secrets.USER_GPG_PUBLIC_KEY }}
        run: |
          echo "Importing GPG keys..."
          echo "$ACTION_GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$USER_GPG_PUBLIC_KEY" | gpg --batch --import
          echo "Key import complete. Verifying keys:"
          gpg --list-keys

      # --- CONDITIONAL DOWNLOAD BLOCK ---
      # Only ONE of the following two steps will execute per run.

      - name: "3a. Get Input File (from GitHub Release)"
        if: github.event.inputs.release_tag != ''
        run: |
          echo "-> Downloading asset from GitHub Release tag: ${{ github.event.inputs.release_tag }}"
          # Download the .gpg asset, which has a random name.
          gh release download "${{ github.event.inputs.release_tag }}" --pattern "*.gpg"
          # Find the downloaded file and rename it to our standard name for the next step.
          mv *.gpg encrypted_input.gpg
          echo "-> Renamed downloaded asset to 'encrypted_input.gpg'."

      - name: "3b. Get Input File (from temp.sh URL)"
        if: github.event.inputs.upload_url != ''
        run: |
          echo "-> Downloading asset from URL: ${{ github.event.inputs.upload_url }}"
          # Use curl to download the file and save it directly with our standard name.
          curl --fail -L -o encrypted_input.gpg "${{ github.event.inputs.upload_url }}"
          echo "-> Download complete. File saved as 'encrypted_input.gpg'."
      
      - name: "4. Decrypt Input File"
        env:
          ACTION_GPG_PASSPHRASE: ${{ secrets.GPG_ACTION_PASSPHRASE }}
        run: |
          echo "-> Decrypting 'encrypted_input.gpg' to 'decrypted_video.mp4'..."
          gpg --quiet --batch --yes --pinentry-mode loopback --decrypt --passphrase "$ACTION_GPG_PASSPHRASE" \
              --output decrypted_video.mp4 encrypted_input.gpg
          echo "-> Decryption complete."

      - name: "5. Compress and Encrypt Video Stream"
        run: |
          echo "-> Parsing FFmpeg options from client..."
          OPTS='${{ github.event.inputs.ffmpeg_options }}'
          
          VIDEO_ENCODER=$(echo $OPTS | jq -r '.video_encoder')
          CRF=$(echo $OPTS | jq -r '.crf')
          PRESET=$(echo $OPTS | jq -r '.preset')
          AUDIO_ENCODER=$(echo $OPTS | jq -r '.audio_encoder')
          PRESERVE_METADATA=$(echo $OPTS | jq -r '.preserve_metadata')

          METADATA_FLAG=""
          if [[ "$PRESERVE_METADATA" == "Yes" ]]; then
            METADATA_FLAG="-map_metadata 0"
          fi
          
          # Define the final unique filename from the client input.
          FINAL_ENCRYPTED_FILENAME="${{ github.event.inputs.output_filename_base }}.gpg"

          echo "-> Starting FFmpeg compression and piping directly to GPG for encryption..."
          echo "-> Final output will be named: '$FINAL_ENCRYPTED_FILENAME'"
          
          # This is the core of the improved logic:
          # ffmpeg outputs to stdout ('-'), which is piped directly to gpg's stdin.
          ffmpeg -i decrypted_video.mp4 \
            -c:v "$VIDEO_ENCODER" -crf "$CRF" -preset "$PRESET" \
            -c:a "$AUDIO_ENCODER" $METADATA_FLAG \
            -f matroska - \
          | gpg --quiet --batch --yes --encrypt --recipient "$USER_GPG_RECIPIENT_ID" --trust-model always \
              --output "$FINAL_ENCRYPTED_FILENAME"

          echo "-> Compression and encryption stream complete."

      - name: "6. Upload Final Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: compressed-output
          # This tells the action to upload the uniquely named file created in the previous step.
          path: ${{ github.event.inputs.output_filename_base }}.gpg
          retention-days: 1
